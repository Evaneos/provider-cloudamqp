// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CommunityInitParameters struct {

	// If the plugin is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Instance identifier
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The name of the plugin
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Configurable sleep time in seconds between retries for plugins
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// Configurable timeout time in seconds for plugins
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type CommunityObservation struct {

	// The description of the plugin
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If the plugin is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance identifier
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The name of the plugin
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Required version of RabbitMQ
	Require *string `json:"require,omitempty" tf:"require,omitempty"`

	// Configurable sleep time in seconds between retries for plugins
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// Configurable timeout time in seconds for plugins
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type CommunityParameters struct {

	// If the plugin is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Instance identifier
	// +kubebuilder:validation:Optional
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The name of the plugin
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Configurable sleep time in seconds between retries for plugins
	// +kubebuilder:validation:Optional
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// Configurable timeout time in seconds for plugins
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

// CommunitySpec defines the desired state of Community
type CommunitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CommunityParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CommunityInitParameters `json:"initProvider,omitempty"`
}

// CommunityStatus defines the observed state of Community.
type CommunityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CommunityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Community is the Schema for the Communitys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqp}
type Community struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CommunitySpec   `json:"spec"`
	Status CommunityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CommunityList contains a list of Communitys
type CommunityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Community `json:"items"`
}

// Repository type metadata.
var (
	Community_Kind             = "Community"
	Community_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Community_Kind}.String()
	Community_KindAPIVersion   = Community_Kind + "." + CRDGroupVersion.String()
	Community_GroupVersionKind = CRDGroupVersion.WithKind(Community_Kind)
)

func init() {
	SchemeBuilder.Register(&Community{}, &CommunityList{})
}
