// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CopySettingsInitParameters struct {

	// Array of one or more settings to be copied. Allowed values:
	// [alarms, config, definitions, firewall, logs, metrics, plugins]
	// Settings to be copied. [alarms, config, definitions, firewall, logs, metrics, plugins]
	Settings []*string `json:"settings,omitempty" tf:"settings,omitempty"`

	// Instance identifier of the CloudAMQP instance to copy the settings
	// from.
	// Instance identifier of the CloudAMQP instance to copy settings from
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type CopySettingsObservation struct {

	// Array of one or more settings to be copied. Allowed values:
	// [alarms, config, definitions, firewall, logs, metrics, plugins]
	// Settings to be copied. [alarms, config, definitions, firewall, logs, metrics, plugins]
	Settings []*string `json:"settings,omitempty" tf:"settings,omitempty"`

	// Instance identifier of the CloudAMQP instance to copy the settings
	// from.
	// Instance identifier of the CloudAMQP instance to copy settings from
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`
}

type CopySettingsParameters struct {

	// Array of one or more settings to be copied. Allowed values:
	// [alarms, config, definitions, firewall, logs, metrics, plugins]
	// Settings to be copied. [alarms, config, definitions, firewall, logs, metrics, plugins]
	// +kubebuilder:validation:Optional
	Settings []*string `json:"settings" tf:"settings,omitempty"`

	// Instance identifier of the CloudAMQP instance to copy the settings
	// from.
	// Instance identifier of the CloudAMQP instance to copy settings from
	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId" tf:"subscription_id,omitempty"`
}

type InstanceInitParameters struct {

	// Copy settings from one CloudAMQP instance to a new. Consists of
	// the block documented below.
	CopySettings []CopySettingsInitParameters `json:"copySettings,omitempty" tf:"copy_settings,omitempty"`

	// Keep associated VPC when deleting instance. Default set to
	// false.
	// Keep associated VPC when deleting instance
	KeepAssociatedVPC *bool `json:"keepAssociatedVpc,omitempty" tf:"keep_associated_vpc,omitempty"`

	// Name of the CloudAMQP instance.
	// Name of the instance
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set to true to not create default alarms
	NoDefaultAlarms *bool `json:"noDefaultAlarms,omitempty" tf:"no_default_alarms,omitempty"`

	// Number of nodes, 1, 3 or 5 depending on plan used. Only needed for
	// legacy plans, will otherwise be computed.
	// Number of nodes in cluster (plan must support it)
	Nodes *float64 `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The subscription plan. See available plans.
	// Name of the plan, see documentation for valid plans
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// The region to host the instance in. See available regions.
	// Name of the region you want to create your instance in
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Rabbit MQ version. Can be left out, will then be set to
	// default value used by CloudAMQP API.
	// RabbitMQ version
	RmqVersion *string `json:"rmqVersion,omitempty" tf:"rmq_version,omitempty"`

	// One or more tags for the CloudAMQP instance, makes it possible to
	// categories multiple instances in console view. Default there is no tags assigned.
	// Tag the instances with optional tags
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The VPC ID. Use this to create your instance in an existing
	// VPC. See available example.
	// The ID of the VPC to create your instance in
	VPCID *float64 `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Creates a dedicated VPC subnet, shouldn't overlap with other
	// VPC subnet, default subnet used 10.56.72.0/24.
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	VPCSubnet *string `json:"vpcSubnet,omitempty" tf:"vpc_subnet,omitempty"`
}

type InstanceObservation struct {

	// Information if the CloudAMQP instance runs either RabbitMQ or LavinMQ.
	// Software backend used, determined by subscription plan
	Backend *string `json:"backend,omitempty" tf:"backend,omitempty"`

	// Copy settings from one CloudAMQP instance to a new. Consists of
	// the block documented below.
	CopySettings []CopySettingsObservation `json:"copySettings,omitempty" tf:"copy_settings,omitempty"`

	// Information if the CloudAMQP instance is shared or dedicated.
	// Is the instance hosted on a dedicated server
	Dedicated *bool `json:"dedicated,omitempty" tf:"dedicated,omitempty"`

	// The external hostname for the CloudAMQP instance.
	// External hostname for the CloudAMQP instance
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The internal hostname for the CloudAMQP instance.
	// Internal hostname for the CloudAMQP instance
	HostInternal *string `json:"hostInternal,omitempty" tf:"host_internal,omitempty"`

	// The identifier (instance_id) for this resource, used as a reference by almost
	// all other resource and data sources
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Keep associated VPC when deleting instance. Default set to
	// false.
	// Keep associated VPC when deleting instance
	KeepAssociatedVPC *bool `json:"keepAssociatedVpc,omitempty" tf:"keep_associated_vpc,omitempty"`

	// Name of the CloudAMQP instance.
	// Name of the instance
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set to true to not create default alarms
	NoDefaultAlarms *bool `json:"noDefaultAlarms,omitempty" tf:"no_default_alarms,omitempty"`

	// Number of nodes, 1, 3 or 5 depending on plan used. Only needed for
	// legacy plans, will otherwise be computed.
	// Number of nodes in cluster (plan must support it)
	Nodes *float64 `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The subscription plan. See available plans.
	// Name of the plan, see documentation for valid plans
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// Flag describing if the resource is ready
	Ready *bool `json:"ready,omitempty" tf:"ready,omitempty"`

	// The region to host the instance in. See available regions.
	// Name of the region you want to create your instance in
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Rabbit MQ version. Can be left out, will then be set to
	// default value used by CloudAMQP API.
	// RabbitMQ version
	RmqVersion *string `json:"rmqVersion,omitempty" tf:"rmq_version,omitempty"`

	// One or more tags for the CloudAMQP instance, makes it possible to
	// categories multiple instances in console view. Default there is no tags assigned.
	// Tag the instances with optional tags
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The VPC ID. Use this to create your instance in an existing
	// VPC. See available example.
	// The ID of the VPC to create your instance in
	VPCID *float64 `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Creates a dedicated VPC subnet, shouldn't overlap with other
	// VPC subnet, default subnet used 10.56.72.0/24.
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	VPCSubnet *string `json:"vpcSubnet,omitempty" tf:"vpc_subnet,omitempty"`

	// The virtual host used by Rabbit MQ.
	// The virtual host
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type InstanceParameters struct {

	// Copy settings from one CloudAMQP instance to a new. Consists of
	// the block documented below.
	// +kubebuilder:validation:Optional
	CopySettings []CopySettingsParameters `json:"copySettings,omitempty" tf:"copy_settings,omitempty"`

	// Keep associated VPC when deleting instance. Default set to
	// false.
	// Keep associated VPC when deleting instance
	// +kubebuilder:validation:Optional
	KeepAssociatedVPC *bool `json:"keepAssociatedVpc,omitempty" tf:"keep_associated_vpc,omitempty"`

	// Name of the CloudAMQP instance.
	// Name of the instance
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set to true to not create default alarms
	// +kubebuilder:validation:Optional
	NoDefaultAlarms *bool `json:"noDefaultAlarms,omitempty" tf:"no_default_alarms,omitempty"`

	// Number of nodes, 1, 3 or 5 depending on plan used. Only needed for
	// legacy plans, will otherwise be computed.
	// Number of nodes in cluster (plan must support it)
	// +kubebuilder:validation:Optional
	Nodes *float64 `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The subscription plan. See available plans.
	// Name of the plan, see documentation for valid plans
	// +kubebuilder:validation:Optional
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// The region to host the instance in. See available regions.
	// Name of the region you want to create your instance in
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Rabbit MQ version. Can be left out, will then be set to
	// default value used by CloudAMQP API.
	// RabbitMQ version
	// +kubebuilder:validation:Optional
	RmqVersion *string `json:"rmqVersion,omitempty" tf:"rmq_version,omitempty"`

	// One or more tags for the CloudAMQP instance, makes it possible to
	// categories multiple instances in console view. Default there is no tags assigned.
	// Tag the instances with optional tags
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The VPC ID. Use this to create your instance in an existing
	// VPC. See available example.
	// The ID of the VPC to create your instance in
	// +kubebuilder:validation:Optional
	VPCID *float64 `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Creates a dedicated VPC subnet, shouldn't overlap with other
	// VPC subnet, default subnet used 10.56.72.0/24.
	// Dedicated VPC subnet, shouldn't overlap with your current VPC's subnet
	// +kubebuilder:validation:Optional
	VPCSubnet *string `json:"vpcSubnet,omitempty" tf:"vpc_subnet,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Instance is the Schema for the Instances API. Creates and manages a Rabbit MQ instance within CloudAMQP.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqp}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.plan) || (has(self.initProvider) && has(self.initProvider.plan))",message="spec.forProvider.plan is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   InstanceSpec   `json:"spec"`
	Status InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
