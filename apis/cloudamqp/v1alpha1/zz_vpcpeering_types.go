// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VpcPeeringInitParameters struct {

	// The CloudAMQP instance identifier.
	// Instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Instance
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Peering identifier created by AW peering request.
	// VPC peering identifier
	PeeringID *string `json:"peeringId,omitempty" tf:"peering_id,omitempty"`

	// Configurable sleep time (seconds) between retries for accepting or
	// removing peering. Default set to 60 seconds.
	// Configurable sleep time in seconds between retries for accepting or removing peering
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// - Configurable timeout time (seconds) for accepting or removing
	// peering. Default set to 3600 seconds.
	// Configurable timeout time in seconds for accepting or removing peering
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The managed VPC identifier.
	// VPC instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Vpc
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a Vpc in cloudamqp to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a Vpc in cloudamqp to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

type VpcPeeringObservation struct {

	// The identifier for this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The CloudAMQP instance identifier.
	// Instance identifier
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Peering identifier created by AW peering request.
	// VPC peering identifier
	PeeringID *string `json:"peeringId,omitempty" tf:"peering_id,omitempty"`

	// Configurable sleep time (seconds) between retries for accepting or
	// removing peering. Default set to 60 seconds.
	// Configurable sleep time in seconds between retries for accepting or removing peering
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// VPC peering status
	// VPC peering status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// - Configurable timeout time (seconds) for accepting or removing
	// peering. Default set to 3600 seconds.
	// Configurable timeout time in seconds for accepting or removing peering
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The managed VPC identifier.
	// VPC instance identifier
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type VpcPeeringParameters struct {

	// The CloudAMQP instance identifier.
	// Instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Peering identifier created by AW peering request.
	// VPC peering identifier
	// +kubebuilder:validation:Optional
	PeeringID *string `json:"peeringId,omitempty" tf:"peering_id,omitempty"`

	// Configurable sleep time (seconds) between retries for accepting or
	// removing peering. Default set to 60 seconds.
	// Configurable sleep time in seconds between retries for accepting or removing peering
	// +kubebuilder:validation:Optional
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// - Configurable timeout time (seconds) for accepting or removing
	// peering. Default set to 3600 seconds.
	// Configurable timeout time in seconds for accepting or removing peering
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The managed VPC identifier.
	// VPC instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Vpc
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a Vpc in cloudamqp to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a Vpc in cloudamqp to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// VpcPeeringSpec defines the desired state of VpcPeering
type VpcPeeringSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VpcPeeringParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VpcPeeringInitParameters `json:"initProvider,omitempty"`
}

// VpcPeeringStatus defines the observed state of VpcPeering.
type VpcPeeringStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpcPeeringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VpcPeering is the Schema for the VpcPeerings API. Accepting VPC peering request from an AWS accepter.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqp}
type VpcPeering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.peeringId) || (has(self.initProvider) && has(self.initProvider.peeringId))",message="spec.forProvider.peeringId is a required parameter"
	Spec   VpcPeeringSpec   `json:"spec"`
	Status VpcPeeringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcPeeringList contains a list of VpcPeerings
type VpcPeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpcPeering `json:"items"`
}

// Repository type metadata.
var (
	VpcPeering_Kind             = "VpcPeering"
	VpcPeering_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VpcPeering_Kind}.String()
	VpcPeering_KindAPIVersion   = VpcPeering_Kind + "." + CRDGroupVersion.String()
	VpcPeering_GroupVersionKind = CRDGroupVersion.WithKind(VpcPeering_Kind)
)

func init() {
	SchemeBuilder.Register(&VpcPeering{}, &VpcPeeringList{})
}
