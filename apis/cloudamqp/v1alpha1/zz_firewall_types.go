// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallInitParameters struct {

	// The CloudAMQP instance ID.
	// Instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Instance
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// An array of rules, minimum of 1 needs to be configured. Each rules
	// block consists of the field documented below.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Configurable sleep time in seconds between retries for firewall
	// configuration. Default set to 30 seconds.
	// Configurable sleep time in seconds between retries for firewall configuration
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// Configurable timeout time in seconds for firewall configuration.
	// Default set to 1800 seconds.
	// Configurable timeout time in seconds for firewall configuration
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type FirewallObservation struct {

	// The identifier for this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The CloudAMQP instance ID.
	// Instance identifier
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// An array of rules, minimum of 1 needs to be configured. Each rules
	// block consists of the field documented below.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// Configurable sleep time in seconds between retries for firewall
	// configuration. Default set to 30 seconds.
	// Configurable sleep time in seconds between retries for firewall configuration
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// Configurable timeout time in seconds for firewall configuration.
	// Default set to 1800 seconds.
	// Configurable timeout time in seconds for firewall configuration
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type FirewallParameters struct {

	// The CloudAMQP instance ID.
	// Instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// An array of rules, minimum of 1 needs to be configured. Each rules
	// block consists of the field documented below.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Configurable sleep time in seconds between retries for firewall
	// configuration. Default set to 30 seconds.
	// Configurable sleep time in seconds between retries for firewall configuration
	// +kubebuilder:validation:Optional
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// Configurable timeout time in seconds for firewall configuration.
	// Default set to 1800 seconds.
	// Configurable timeout time in seconds for firewall configuration
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type RulesInitParameters struct {

	// Description name of the rule. e.g. Default.
	// Naming descripton e.g. 'Default'
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// CIDR address: IP address with CIDR notation (e.g. 10.56.72.0/24)
	// CIDR address: IP address with CIDR notation (e.g. 10.56.72.0/24)
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Custom ports to be opened
	// Custom ports between 0 - 65554
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// Pre-defined service ports, see table below
	// Pre-defined services 'AMQP', 'AMQPS', 'HTTPS', 'MQTT', 'MQTTS', 'STOMP', 'STOMPS', 'STREAM', 'STREAM_SSL'
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`
}

type RulesObservation struct {

	// Description name of the rule. e.g. Default.
	// Naming descripton e.g. 'Default'
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// CIDR address: IP address with CIDR notation (e.g. 10.56.72.0/24)
	// CIDR address: IP address with CIDR notation (e.g. 10.56.72.0/24)
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Custom ports to be opened
	// Custom ports between 0 - 65554
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// Pre-defined service ports, see table below
	// Pre-defined services 'AMQP', 'AMQPS', 'HTTPS', 'MQTT', 'MQTTS', 'STOMP', 'STOMPS', 'STREAM', 'STREAM_SSL'
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`
}

type RulesParameters struct {

	// Description name of the rule. e.g. Default.
	// Naming descripton e.g. 'Default'
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// CIDR address: IP address with CIDR notation (e.g. 10.56.72.0/24)
	// CIDR address: IP address with CIDR notation (e.g. 10.56.72.0/24)
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Custom ports to be opened
	// Custom ports between 0 - 65554
	// +kubebuilder:validation:Optional
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// Pre-defined service ports, see table below
	// Pre-defined services 'AMQP', 'AMQPS', 'HTTPS', 'MQTT', 'MQTTS', 'STOMP', 'STOMPS', 'STREAM', 'STREAM_SSL'
	// +kubebuilder:validation:Optional
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`
}

// FirewallSpec defines the desired state of Firewall
type FirewallSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FirewallInitParameters `json:"initProvider,omitempty"`
}

// FirewallStatus defines the observed state of Firewall.
type FirewallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Firewall is the Schema for the Firewalls API. Configure and manage firewall rules
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqp}
type Firewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	Spec   FirewallSpec   `json:"spec"`
	Status FirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallList contains a list of Firewalls
type FirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Firewall `json:"items"`
}

// Repository type metadata.
var (
	Firewall_Kind             = "Firewall"
	Firewall_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Firewall_Kind}.String()
	Firewall_KindAPIVersion   = Firewall_Kind + "." + CRDGroupVersion.String()
	Firewall_GroupVersionKind = CRDGroupVersion.WithKind(Firewall_Kind)
)

func init() {
	SchemeBuilder.Register(&Firewall{}, &FirewallList{})
}
