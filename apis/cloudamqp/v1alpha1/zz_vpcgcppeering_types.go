// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VpcGCPPeeringInitParameters struct {

	// The CloudAMQP instance identifier.
	// Instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Instance
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Network URI of the VPC network to which you will peer with.
	// See examples above for the format.
	// VPC network uri
	PeerNetworkURI *string `json:"peerNetworkUri,omitempty" tf:"peer_network_uri,omitempty"`

	// Configurable sleep time (seconds) between retries when
	// requesting or reading peering. Default set to 10 seconds.
	// Configurable sleep in seconds between retries when requesting or reading peering
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// Configurable timeout time (seconds) before retries times
	// out. Default set to 1800 seconds.
	// Configurable timeout time (seconds) before retries times out
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The managed VPC identifier.
	// VPC instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Vpc
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a Vpc in cloudamqp to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a Vpc in cloudamqp to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// Makes the resource wait until the peering is connected.
	// Default set to false.
	// Wait until peering status change to 'connected'
	WaitOnPeeringStatus *bool `json:"waitOnPeeringStatus,omitempty" tf:"wait_on_peering_status,omitempty"`
}

type VpcGCPPeeringObservation struct {

	// VPC peering auto created routes
	// VPC peering auto created routes
	AutoCreateRoutes *bool `json:"autoCreateRoutes,omitempty" tf:"auto_create_routes,omitempty"`

	// The identifier for this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The CloudAMQP instance identifier.
	// Instance identifier
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Network URI of the VPC network to which you will peer with.
	// See examples above for the format.
	// VPC network uri
	PeerNetworkURI *string `json:"peerNetworkUri,omitempty" tf:"peer_network_uri,omitempty"`

	// Configurable sleep time (seconds) between retries when
	// requesting or reading peering. Default set to 10 seconds.
	// Configurable sleep in seconds between retries when requesting or reading peering
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// VPC peering state
	// VPC peering state
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// VPC peering state details
	// VPC peering state details
	StateDetails *string `json:"stateDetails,omitempty" tf:"state_details,omitempty"`

	// Configurable timeout time (seconds) before retries times
	// out. Default set to 1800 seconds.
	// Configurable timeout time (seconds) before retries times out
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The managed VPC identifier.
	// VPC instance identifier
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Makes the resource wait until the peering is connected.
	// Default set to false.
	// Wait until peering status change to 'connected'
	WaitOnPeeringStatus *bool `json:"waitOnPeeringStatus,omitempty" tf:"wait_on_peering_status,omitempty"`
}

type VpcGCPPeeringParameters struct {

	// The CloudAMQP instance identifier.
	// Instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *float64 `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudamqp to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Network URI of the VPC network to which you will peer with.
	// See examples above for the format.
	// VPC network uri
	// +kubebuilder:validation:Optional
	PeerNetworkURI *string `json:"peerNetworkUri,omitempty" tf:"peer_network_uri,omitempty"`

	// Configurable sleep time (seconds) between retries when
	// requesting or reading peering. Default set to 10 seconds.
	// Configurable sleep in seconds between retries when requesting or reading peering
	// +kubebuilder:validation:Optional
	Sleep *float64 `json:"sleep,omitempty" tf:"sleep,omitempty"`

	// Configurable timeout time (seconds) before retries times
	// out. Default set to 1800 seconds.
	// Configurable timeout time (seconds) before retries times out
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The managed VPC identifier.
	// VPC instance identifier
	// +crossplane:generate:reference:type=github.com/evaneos/provider-cloudamqp/apis/cloudamqp/v1alpha1.Vpc
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a Vpc in cloudamqp to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a Vpc in cloudamqp to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// Makes the resource wait until the peering is connected.
	// Default set to false.
	// Wait until peering status change to 'connected'
	// +kubebuilder:validation:Optional
	WaitOnPeeringStatus *bool `json:"waitOnPeeringStatus,omitempty" tf:"wait_on_peering_status,omitempty"`
}

// VpcGCPPeeringSpec defines the desired state of VpcGCPPeering
type VpcGCPPeeringSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VpcGCPPeeringParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VpcGCPPeeringInitParameters `json:"initProvider,omitempty"`
}

// VpcGCPPeeringStatus defines the observed state of VpcGCPPeering.
type VpcGCPPeeringStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpcGCPPeeringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VpcGCPPeering is the Schema for the VpcGCPPeerings API. Create VPC peering configuration to another VPC network hosted in GCP
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudamqp}
type VpcGCPPeering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.peerNetworkUri) || (has(self.initProvider) && has(self.initProvider.peerNetworkUri))",message="spec.forProvider.peerNetworkUri is a required parameter"
	Spec   VpcGCPPeeringSpec   `json:"spec"`
	Status VpcGCPPeeringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcGCPPeeringList contains a list of VpcGCPPeerings
type VpcGCPPeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpcGCPPeering `json:"items"`
}

// Repository type metadata.
var (
	VpcGCPPeering_Kind             = "VpcGCPPeering"
	VpcGCPPeering_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VpcGCPPeering_Kind}.String()
	VpcGCPPeering_KindAPIVersion   = VpcGCPPeering_Kind + "." + CRDGroupVersion.String()
	VpcGCPPeering_GroupVersionKind = CRDGroupVersion.WithKind(VpcGCPPeering_Kind)
)

func init() {
	SchemeBuilder.Register(&VpcGCPPeering{}, &VpcGCPPeeringList{})
}
